name: Generate and Backup SSL Certificates

on:
  schedule:
    - cron: "35 23 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  CF_TOKEN: ${{ secrets.CF_TOKEN }}
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30
  ACME_PATH: "/home/runner/.acme.sh/acme.sh"

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest
    name: Generate and Backup SSL Certificates
    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install rclone and acme.sh
        run: |
          curl https://rclone.org/install.sh | sudo bash
          curl https://get.acme.sh | sh -s email=$EMAIL

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates and domain list from Dropbox
        run: |
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log
          rclone copy dropbox:$DROPBOX_PATH/cloudflare_domains_list.txt ./

      - name: Generate SSL Certificates if needed
        env:
          CF_Token: ${{ secrets.CF_TOKEN }}
          CF_Account_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          set -eo pipefail

          check_certificate_validity() {
            cert=$1
            [ -f "$cert" ] || return 1
            exp=$(openssl x509 -enddate -noout -in "$cert" 2>/dev/null | cut -d= -f2)
            exp_ts=$(date -d "$exp" +%s)
            now_ts=$(date +%s)
            [ $(( (exp_ts - now_ts)/86400 )) -gt $DAYS_BEFORE_EXPIRY ]
          }

          issue_and_install_certificate() {
            domain=$1; type=$2
            updated=0
            src="$HOME/.acme.sh/${domain}$([ "$type" = "EC" ] && echo "_ecc" || echo "")"
            dest="./ssl/$domain$([ "$type" = "RSA" ] && echo "/rsa" || echo "")"
            mkdir -p "$dest"
            certf="$dest/fullchain.cer"
            keyf="$dest/private.key"
            logf="$dest/${type}_issue.log"

            if ! check_certificate_validity "$certf"; then
              echo "→ 生成 $domain 的 $type 证书…"
              if ! $ACME_PATH --issue --force --server letsencrypt --dns dns_cf -d "$domain" -d "*.$domain" \
                --keylength $([ "$type" = "RSA" ] && echo 2048 || echo ec-256) >"$logf" 2>&1; then
                echo "✘ $type 签发失败，请查看日志："
                cat "$logf"
                return 1
              fi

              if [ -f "$src/fullchain.cer" ] && [ -f "$src/${domain}.key" ]; then
                cp "$src/fullchain.cer" "$certf"
                cp "$src/${domain}.key" "$keyf"
              elif [ -f "$src/${domain}.cer" ] && [ -f "$src/${domain}.key" ]; then
                cp "$src/${domain}.cer" "$certf"
                cp "$src/${domain}.key" "$keyf"
              else
                echo "✘ 未在 $src 中找到 $type 证书，目录内容如下："
                ls -al "$src"
                return 1
              fi

              [ -f "$src/ca.cer" ] && cp "$src/ca.cer" "$dest/ca.cer"
              echo "✔ 已安装 $domain 的 $type 证书。"
              updated=1
            else
              echo "— $domain 的 $type 证书仍然有效，跳过。"
            fi

            if [ $updated -eq 1 ]; then
              domains="$domains $domain"
            fi
          }

          domains=""
          while IFS= read -r domain || [ -n "$domain" ]; do
            issue_and_install_certificate "$domain" EC
            issue_and_install_certificate "$domain" RSA
          done < cloudflare_domains_list.txt

          if [ -n "$domains" ]; then
            uniq=$(echo $domains | tr ' ' '\n' | sort -u | tr '\n' ' ')
            body="以下域名已更新证书：\n$uniq"
            url="${{ secrets.BARK_URL }}"
            ENCODED=$(echo "$body" | sed 's/ /%20/g; s/\\n/%0A/g')
            curl -X POST "$url/SSL%20Updated/$ENCODED"
          else
            echo "无证书更新，且不会发送通知。"
          fi

      - name: Validate new certificates
        run: |
          find ./ssl -name "fullchain.cer" -print0 \
            | xargs -0 -n1 -I{} openssl x509 -in {} -noout -text

      - name: Backup certificates to Dropbox
        run: |
          rclone sync ssl dropbox:$DROPBOX_PATH $RCLONE_PARAMS

      - name: Backup rclone config
        run: |
          rclone copy ~/.config/rclone dropbox:$DROPBOX_PATH/rclone-config $RCLONE_PARAMS

      - name: Cleanup
        run: |
          rm -rf ssl cloudflare_domains_list.txt

      - name: Update RCLONE_CONFIG secret
        env:
          CLI_TOKEN: ${{ secrets.CLI_TOKEN }}
        run: |
          echo "${CLI_TOKEN}" | gh auth login --with-token
          gh secret set RCLONE_CONFIG -b"$(cat ~/.config/rclone/rclone.conf)"
