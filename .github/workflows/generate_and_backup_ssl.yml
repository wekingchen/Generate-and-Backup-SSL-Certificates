name: Generate and Backup SSL Certificates
on:
  schedule:
    - cron: "35 23 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  CF_TOKEN: ${{ secrets.CF_TOKEN }}
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30
  ACME_PATH: "/home/runner/.acme.sh/acme.sh"
  ACME_HOME: "/home/runner/.acme.sh"

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest
    name: Generate and Backup SSL Certificates
    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install rclone and acme.sh
        run: |
          curl https://rclone.org/install.sh | sudo bash
          curl https://get.acme.sh | sh -s email=$EMAIL

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates and domain list from Dropbox
        run: |
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log || exit 1
          rclone copy dropbox:$DROPBOX_PATH/cloudflare_domains_list.txt ./ || exit 1
          echo "SSL Certificates and domain list synced from Dropbox."

      - name: Generate SSL Certificates if needed
        env:
          CF_Token: ${{ secrets.CF_TOKEN }}
          CF_Account_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          check_certificate_validity() {
            cert_path=$1
            if [ -f "$cert_path" ]; then
              expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
              if ! expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null); then
                echo "Error parsing expiry date: $expiry_date"
                return 1
              fi
              current_timestamp=$(date +%s)
              remaining_days=$(( (expiry_timestamp - current_timestamp) / 86400 ))
              if [ "$remaining_days" -gt "$DAYS_BEFORE_EXPIRY" ]; then
                echo "Certificate valid for $remaining_days days"
                return 0
              else
                echo "Certificate expires in $remaining_days days"
                return 1
              fi
            else
              return 1
            fi
          }

          prepare_cert_home() {
            domain=$1
            cert_type=$2
            cert_home="$ACME_HOME/${domain}-${cert_type}"
            mkdir -p "$cert_home"
          }

          process_certificate() {
            domain=$1
            cert_type=$2
            cert_path="./ssl/$domain/$cert_type"
            fullchain_file="$cert_path/fullchain.cer"
            privkey_file="$cert_path/privkey.key"

            mkdir -p "$cert_path"
            prepare_cert_home "$domain" "$cert_type"

            if check_certificate_validity "$fullchain_file"; then
              echo "Existing $cert_type certificate for $domain is still valid."
              return 0
            fi

            key_length=$([ "$cert_type" = "rsa" ] && echo "2048" || echo "ec-256")
            echo "Generating $cert_type certificate for $domain..."
            $ACME_PATH --issue --dns dns_cf \
              -d "$domain" -d "*.$domain" \
              --keylength "$key_length" \
              --home "$ACME_HOME/${domain}-${cert_type}" \
              --force \
              --log-level 2 2>&1 | tee issue.log

            if [ ! -f "$ACME_HOME/${domain}-${cert_type}/${domain}.cer" ]; then
              echo "::error::Certificate generation failed! Check issue.log"
              grep -E 'ERROR|WARN' issue.log
              exit 1
            fi

            $ACME_PATH --installcert -d "$domain" \
              --home "$ACME_HOME/${domain}-${cert_type}" \
              --fullchain-file "$fullchain_file" \
              --key-file "$privkey_file"

            if [ ! -s "$fullchain_file" ] || [ ! -s "$privkey_file" ]; then
              echo "::error::Certificate files empty after installation"
              ls -l "$cert_path"
              exit 1
            fi
            return 0
          }

          any_updated=false
          updated_domains=""
          while IFS= read -r domain || [ -n "$domain" ]; do
            echo "Processing domain: $domain"
            
            if process_certificate "$domain" "ecc"; then
              any_updated=true
              updated_domains="$updated_domains $domain (ECC)"
            fi
            
            if process_certificate "$domain" "rsa"; then
              any_updated=true
              updated_domains="$updated_domains $domain (RSA)"
            fi
          done < cloudflare_domains_list.txt

          if [ "$any_updated" = true ]; then
            BARK_URL="${{ secrets.BARK_URL }}"
            if [ -n "$BARK_URL" ]; then
              ENCODED_BODY=$(echo "Updated domains:$updated_domains" | sed 's/ /%20/g; s/\n/%0A/g')
              curl -X POST "$BARK_URL/SSL%20Certificate%20Update/$ENCODED_BODY"
            fi
          fi

      - name: Validate new certificates
        run: |
          for cert in $(find ./ssl -name "fullchain.cer"); do
            openssl x509 -in "$cert" -noout -text || {
              echo "Invalid certificate: $cert"
              exit 1
            }
          done
          echo "All certificates are valid."

      - name: Backup certificates to Dropbox
        run: |
          rclone sync ./ssl dropbox:$DROPBOX_PATH $RCLONE_PARAMS --log-file=rclone_backup.log || exit 1
          echo "SSL Certificates backup to Dropbox completed."

      - name: Backup rclone config
        run: |
          rclone copy ~/.config/rclone dropbox:$DROPBOX_PATH/rclone-config $RCLONE_PARAMS --log-file=rclone_config.log || exit 1
          echo "rclone config backup to Dropbox completed."

      - name: Cleanup local certificates and domain list
        run: |
          rm -rf ./ssl cloudflare_domains_list.txt
          echo "Local SSL certificates and domain list cleaned up."

      - name: Update GitHub Secrets
        env:
          CLI_TOKEN: ${{ secrets.CLI_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          RCLONE_CONFIG=$(cat ~/.config/rclone/rclone.conf)
          echo "${CLI_TOKEN}" | gh auth login --with-token
          gh secret set RCLONE_CONFIG -b"${RCLONE_CONFIG}" --repo "${REPO}" || {
            echo "Failed to update RCLONE_CONFIG secret"
            exit 1
          }
          echo "Updated RCLONE_CONFIG secret."
