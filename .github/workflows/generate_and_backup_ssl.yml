name: Generate and Backup SSL Certificates
on:
  schedule:
    - cron: "35 23 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  CF_TOKEN: ${{ secrets.CF_TOKEN }}
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30
  ACME_PATH: "/home/runner/.acme.sh/acme.sh"
  ACME_HOME: "/home/runner/.acme.sh"

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest
    name: Generate and Backup SSL Certificates
    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install rclone and acme.sh
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          curl -fsSL https://get.acme.sh | sh -s email=$EMAIL
          ~/.acme.sh/acme.sh --set-default-ca --server letsencrypt
          ~/.acme.sh/acme.sh --register-account -m $EMAIL

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates and domain list from Dropbox
        run: |
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log || exit 1
          rclone copy dropbox:$DROPBOX_PATH/cloudflare_domains_list.txt ./ || exit 1
          echo "SSL Certificates and domain list synced from Dropbox."

      - name: Generate SSL Certificates if needed
        env:
          CF_Token: ${{ secrets.CF_TOKEN }}
          CF_Account_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          check_certificate_validity() {
            cert_path=$1
            if [ -f "$cert_path" ]; then
              expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
              if ! expiry_timestamp=$(date -d "$expiry_date" +%s 2>/dev/null); then
                echo "Error parsing date: $expiry_date"
                return 1
              fi
              current_timestamp=$(date +%s)
              remaining_days=$(( (expiry_timestamp - current_timestamp) / 86400 ))
              [ "$remaining_days" -gt "$DAYS_BEFORE_EXPIRY" ]
            else
              return 1
            fi
          }

          process_certificate() {
            domain=$1
            cert_type=$2
            cert_dir="./ssl/$domain/$cert_type"
            fullchain_file="$cert_dir/fullchain.cer"
            privkey_file="$cert_dir/privkey.key"

            # 创建证书目录
            mkdir -p "$cert_dir"

            # 检查现有证书有效性
            if check_certificate_validity "$fullchain_file"; then
              echo "Existing $cert_type certificate for $domain is valid"
              return 0
            fi

            # 生成新证书
            key_length=$([ "$cert_type" = "rsa" ] && echo "2048" || echo "ec-256")
            echo "Generating $cert_type certificate for $domain..."
            
            # 生成证书（修复点1：添加详细日志）
            $ACME_PATH --issue --dns dns_cf \
              -d "$domain" -d "*.$domain" \
              --keylength "$key_length" \
              --home "$ACME_HOME/${domain}-${cert_type}" \
              --server letsencrypt \
              --force \
              --log-level 3 2>&1 | tee issue.log

            # 验证生成路径（修复点2：精确路径检查）
            generated_cert_dir="$ACME_HOME/${domain}-${cert_type}/${domain}_${cert_type}"
            if [ ! -f "$generated_cert_dir/fullchain.cer" ]; then
              echo "::error::Certificate generation failed! Expected path:"
              echo "$generated_cert_dir/fullchain.cer"
              echo "Directory contents:"
              ls -l "$ACME_HOME/${domain}-${cert_type}"
              exit 1
            fi

            # 安装证书（修复点3：使用绝对路径）
            $ACME_PATH --installcert -d "$domain" \
              --home "$ACME_HOME/${domain}-${cert_type}" \
              --fullchain-file "$fullchain_file" \
              --key-file "$privkey_file" \
              --reloadcmd "echo Certificates installed to $cert_dir"

            # 最终验证（修复点4：双重检查）
            if [ ! -s "$fullchain_file" ] || [ ! -s "$privkey_file" ]; then
              echo "::error::Certificate files verification failed"
              echo "Disk usage:"
              df -h .
              echo "Directory contents:"
              tree -L 3 ./ssl
              exit 1
            fi
            
            echo "✅ Successfully processed $cert_type certificate for $domain"
            return 0
          }

          any_updated=false
          updated_domains=""
          while IFS= read -r domain || [ -n "$domain" ]; do
            domain=$(echo "$domain" | xargs)
            [ -z "$domain" ] && continue
            
            echo "::group::Processing domain: $domain"
            
            # 处理ECC证书
            if process_certificate "$domain" "ecc"; then
              any_updated=true
              updated_domains="$updated_domains • $domain (ECC)"
            fi
            
            # 处理RSA证书
            if process_certificate "$domain" "rsa"; then
              any_updated=true
              updated_domains="$updated_domains • $domain (RSA)"
            fi
            
            echo "::endgroup::"
          done < cloudflare_domains_list.txt

          # 发送通知
          if [ "$any_updated" = true ]; then
            BARK_URL="${{ secrets.BARK_URL }}"
            if [ -n "$BARK_URL" ]; then
              message="Updated domains:$updated_domains"
              encoded_msg=$(echo "$message" | sed 's/ /%20/g; s/•/%E2%80%A2/g')
              curl -fsS "$BARK_URL/SSL%20Updated/$encoded_msg"
            fi
          fi

      - name: Validate new certificates
        run: |
          echo "::group::Certificate Validation"
          find ./ssl -name "fullchain.cer" -print0 | xargs -0 -I{} sh -c '
            echo "Checking {}..."
            openssl x509 -in "{}" -noout -text || exit 1
          '
          echo "::endgroup::"

      - name: Backup certificates to Dropbox
        run: |
          rclone sync ./ssl dropbox:$DROPBOX_PATH $RCLONE_PARAMS \
            --log-level INFO \
            --log-file=rclone_backup.log
          echo "✅ Backup completed at $(date +'%Y-%m-%d %H:%M:%S')"

      - name: Backup rclone config
        run: |
          rclone copy ~/.config/rclone dropbox:$DROPBOX_PATH/rclone-config \
            $RCLONE_PARAMS \
            --log-file=rclone_config.log
          echo "✅ Rclone config backup completed"

      - name: Cleanup local certificates
        run: |
          rm -rf ./ssl cloudflare_domains_list.txt
          echo "🧹 Local files cleaned up"

      - name: Update GitHub Secrets
        env:
          CLI_TOKEN: ${{ secrets.CLI_TOKEN }}
        run: |
          echo "$CLI_TOKEN" | gh auth login --with-token
          gh secret set RCLONE_CONFIG \
            -b"$(cat ~/.config/rclone/rclone.conf)" \
            --repo "${{ github.repository }}"
          echo "🔑 Secrets updated at $(date +'%H:%M:%S')"
