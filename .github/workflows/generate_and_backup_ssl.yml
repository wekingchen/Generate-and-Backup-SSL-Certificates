name: Generate and Backup SSL Certificates
on:
  schedule:
    - cron: "35 23 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  CF_TOKEN: ${{ secrets.CF_TOKEN }}
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30
  ACME_PATH: "/home/runner/.acme.sh/acme.sh"
  ACME_HOME: "/home/runner/.acme.sh"  # 新增环境变量

jobs:
  generate-and-backup:
    runs-on: ubuntu-latest
    name: Generate and Backup SSL Certificates
    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install rclone and acme.sh
        run: |
          curl https://rclone.org/install.sh | sudo bash
          curl https://get.acme.sh | sh -s email=$EMAIL

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates and domain list from Dropbox
        run: |
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log || exit 1
          rclone copy dropbox:$DROPBOX_PATH/cloudflare_domains_list.txt ./ || exit 1
          echo "SSL Certificates and domain list synced from Dropbox."

      - name: Generate SSL Certificates if needed
        env:
          CF_Token: ${{ secrets.CF_TOKEN }}
          CF_Account_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          check_certificate_validity() {
            cert_path=$1
            if [ -f "$cert_path" ]; then
              expiry_date=$(openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
              expiry_timestamp=$(date -d "$expiry_date" +%s || date -j -f "%b %d %H:%M:%S %Y %Z" "$expiry_date" +%s)
              current_timestamp=$(date +%s)
              if [ "$expiry_timestamp" -gt "$current_timestamp" ]; then
                remaining_days=$(( (expiry_timestamp - current_timestamp) / 86400 ))
                if [ "$remaining_days" -gt "$DAYS_BEFORE_EXPIRY" ]; then
                  echo "Certificate at $cert_path is valid for more than $DAYS_BEFORE_EXPIRY days."
                  return 0
                else
                  echo "Certificate at $cert_path will expire within $DAYS_BEFORE_EXPIRY days."
                  return 1
                fi
              else
                echo "Certificate at $cert_path has already expired."
                return 1
              fi
            else
              echo "Certificate file $cert_path does not exist."
              return 1
            fi
          }

          # 新增文件同步函数
          sync_with_retry() {
            local src=$1
            local dest=$2
            local retries=3
            local delay=5

            for ((i=1; i<=retries; i++)); do
              cp "$src" "$dest" && return 0
              echo "Copy failed (attempt $i), retrying in $delay seconds..."
              sleep $delay
            done
            echo "Failed to copy after $retries attempts"
            return 1
          }

          issue_and_install_certificate() {
            domain=$1
            cert_type=$2
            cert_path="./ssl/$domain"
            [ "$cert_type" = "RSA" ] && cert_path="$cert_path/rsa"
            cert_file="$cert_path/$domain.cer"
            key_file="$cert_path/$domain.key"

            # 确保目标目录存在
            mkdir -p "$cert_path" || { echo "无法创建目录: $cert_path"; exit 1; }

            certificate_updated=false

            if ! check_certificate_validity "$cert_file"; then
              echo "正在为 $domain 生成 $cert_type 证书..."
              
              # 生成证书命令添加调试参数
              issue_output=$($ACME_PATH --issue --dns dns_cf -d "$domain" -d "*.$domain" \
                --keylength $([ "$cert_type" = "RSA" ] && echo "2048" || echo "ec-256") \
                --log $(mktemp) --force 2>&1)

              if echo "$issue_output" | grep -q 'success'; then
                # 新增证书安装参数
                $ACME_PATH --installcert -d "$domain" \
                  --key-file "$key_file" \
                  --fullchain-file "$cert_file" \
                  --cert-home "$ACME_HOME" \
                  --force || {
                    echo "安装失败，调试信息："
                    echo "acme.sh目录内容:"
                    ls -l "$ACME_HOME/$domain/"
                    echo "目标目录内容:"
                    ls -l "$cert_path"
                    exit 1
                  }

                # 新增文件验证
                if [ ! -f "$cert_file" ]; then
                  echo "手动复制证书文件..."
                  sync_with_retry "$ACME_HOME/$domain/fullchain.cer" "$cert_file"
                  sync_with_retry "$ACME_HOME/$domain/$domain.key" "$key_file"
                fi

                # 新增RSA证书验证
                if [ "$cert_type" = "RSA" ]; then
                  openssl rsa -in "$key_file" -check -noout || {
                    echo "RSA密钥校验失败"
                    exit 1
                  }
                fi

                echo "已为 $domain 生成并安装 $cert_type 证书。"
                certificate_updated=true
              else
                echo "无法为 $domain 生成 $cert_type 证书。错误信息："
                echo "$issue_output"
                exit 1
              fi
            else
              echo "$cert_path 的现有 $cert_type 证书仍然有效，无需更新。"
            fi

            $certificate_updated && return 0 || return 1
          }

          any_certificate_updated=false
          updated_domains=""

          while IFS= read -r domain || [ -n "$domain" ]; do
            mkdir -p "./ssl/$domain/rsa"
            if issue_and_install_certificate "$domain" "EC"; then
              any_certificate_updated=true
              updated_domains="$updated_domains $domain"
            fi
            if issue_and_install_certificate "$domain" "RSA"; then
              any_certificate_updated=true
              updated_domains="$updated_domains $domain"
            fi
          done < cloudflare_domains_list.txt || true

          if [ "$any_certificate_updated" = true ] && [ -n "$updated_domains" ]; then
            BARK_URL="${{ secrets.BARK_URL }}"
            NOTIFICATION_TITLE="SSL证书已更新"
            unique_domains=$(echo "$updated_domains" | tr ' ' '\n' | sort -u | tr '\n' ' ')
            NOTIFICATION_BODY="以下域名的SSL证书已成功更新:\n$unique_domains"

            if [ -n "$BARK_URL" ]; then
              ENCODED_BODY=$(echo "$NOTIFICATION_BODY" | sed 's/ /%20/g; s/\n/%0A/g')
              curl -X POST "$BARK_URL/$NOTIFICATION_TITLE/$ENCODED_BODY"
            else
              echo "BARK_URL 未设置，跳过通知。"
            fi
          else
            echo "没有证书更新，跳过通知。"
          fi

      - name: Validate new certificates
        run: |
          for cert in $(find ./ssl -name "*.cer"); do
            openssl x509 -in "$cert" -noout -text || {
              echo "Invalid certificate: $cert"; exit 1;
            }
          done
          echo "All certificates are valid."

      - name: Backup certificates to Dropbox
        run: |
          rclone sync ./ssl dropbox:$DROPBOX_PATH $RCLONE_PARAMS --log-file=rclone_backup.log || exit 1
          echo "SSL Certificates backup to Dropbox completed."

      - name: Backup rclone config
        run: |
          rclone copy ~/.config/rclone dropbox:$DROPBOX_PATH/rclone-config $RCLONE_PARAMS --log-file=rclone_config.log || exit 1
          echo "rclone config backup to Dropbox completed."

      - name: Cleanup local certificates and domain list
        run: |
          rm -rf ./ssl cloudflare_domains_list.txt
          echo "Local SSL certificates and domain list cleaned up."

      - name: Update GitHub Secrets
        env:
          CLI_TOKEN: ${{ secrets.CLI_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          RCLONE_CONFIG=$(cat ~/.config/rclone/rclone.conf)
          echo "${CLI_TOKEN}" | gh auth login --with-token
          gh secret set RCLONE_CONFIG -b"${RCLONE_CONFIG}" --repo "${REPO}" || {
            echo "Failed to update RCLONE_CONFIG secret"; exit 1;
          }
          echo "Updated RCLONE_CONFIG secret."
