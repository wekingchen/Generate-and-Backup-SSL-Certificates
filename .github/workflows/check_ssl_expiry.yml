name: Check SSL Certificate Expiry and Update Certificates

on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  CF_TOKEN: ${{ secrets.CF_TOKEN }}
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30
  ACME_PATH: "/home/runner/.acme.sh/acme.sh"

jobs:
  check-and-update-certificates:
    runs-on: ubuntu-latest
    name: Check SSL Certificate Expiry and Update Certificates
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install rclone and acme.sh
        run: |
          curl https://rclone.org/install.sh | sudo bash
          curl https://get.acme.sh | sh -s email=$EMAIL

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates and domain list from Dropbox
        run: |
          set -eo pipefail
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log
          rclone copy dropbox:$DROPBOX_PATH/cloudflare_domains_list.txt ./ --log-file=rclone_sync.log
          echo "SSL certificates and domain list synced."

      - name: Check expiry and optionally renew
        run: |
          set -eo pipefail

          git config --global user.email "$EMAIL"
          git config --global user.name "acme-bot"

          # 准备 CHECK_LIST.md
          NOW=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          HEADER="## Certificate Status (Checked at $NOW)"
          echo "$HEADER" > CHECK_LIST.md
          cat << 'EOF' >> CHECK_LIST.md
| Domain | EC Expiry | Days Left EC | RSA Expiry | Days Left RSA |
|--------|-----------|-------------|------------|--------------|
EOF

          trigger_renewal=false
          expiring_domains=""

          # 检查函数
          check_cert() {
            cert="$1/fullchain.cer"
            if [ -f "$cert" ]; then
              exp_date=$(openssl x509 -enddate -noout -in "$cert" | cut -d= -f2)
              exp_ts=$(date -d "$exp_date" +%s)
              now_ts=$(date +%s)
              days=$(( (exp_ts - now_ts)/86400 ))
              echo "$exp_date|$days"
            else
              echo "NOTFOUND|0"
            fi
          }

          # 续期函数
          renew_cert() {
            domain=$1; type=$2
            dir="./ssl/$domain"
            [ "$type" = "RSA" ] && dir="$dir/rsa"
            cert="$dir/fullchain.cer"
            key="$dir/private.key"

            # 如果少于阈值则续期
            if ! openssl x509 -checkend $(( DAYS_BEFORE_EXPIRY * 86400 )) -noout -in "$cert"; then
              echo "→ 续期 $domain ($type)…"
              if [ "$type" = "EC" ]; then
                $ACME_PATH --issue --force --dns dns_cf --ecc -d "$domain" -d "*.$domain"
                $ACME_PATH --installcert --ecc -d "$domain" \
                  --key-file "$key" --fullchain-file "$cert"
              else
                $ACME_PATH --issue --force --dns dns_cf -d "$domain" -d "*.$domain" \
                  --keylength 2048
                $ACME_PATH --installcert -d "$domain" \
                  --key-file "$key" --fullchain-file "$cert"
              fi
              echo "✔ 已续期 $domain ($type)"
              trigger_renewal=true
              expiring_domains="$expiring_domains $domain"
            else
              echo "— $domain ($type) 仍然有效"
            fi
          }

          # 遍历域名
          while IFS= read -r domain || [ -n "$domain" ]; do
            # 并行检查
            {
              IFS='|' read ec_date ec_days <<< "$(check_cert "./ssl/$domain")"
              IFS='|' read rsa_date rsa_days <<< "$(check_cert "./ssl/$domain/rsa")"
              printf "| %s | %s | %d | %s | %d |\n" \
                "$domain" "$ec_date" "$ec_days" "$rsa_date" "$rsa_days" \
                >> CHECK_LIST.md

              # 判断是否需要续期
              if [ "$ec_days" -lt "$DAYS_BEFORE_EXPIRY" ] || [ "$rsa_days" -lt "$DAYS_BEFORE_EXPIRY" ]; then
                renew_cert "$domain" "EC"
                renew_cert "$domain" "RSA"
              fi
            } &
          done < cloudflare_domains_list.txt
          wait

          # 只有有变动时才提交
          if ! git diff --quiet CHECK_LIST.md; then
            git add CHECK_LIST.md
            git commit -m "Update CHECK_LIST.md at $NOW"
            git push
          else
            echo "CHECK_LIST.md 无变化，跳过提交。"
          fi

          # 发送 Bark 通知
          if [ "$trigger_renewal" = "true" ]; then
            title="SSL%20Cert%20Updated"
            domains_enc=$(echo "$expiring_domains" | tr ' ' '\n' | sort -u | tr '\n' ' ' | sed 's/ /%20/g')
            body="域名%20更新：%20$domains_enc"
            curl -s -X POST "${{ secrets.BARK_URL }}/$title/$body"
          else
            echo "无证书续期，无需通知。"
          fi

      - name: Push updated CHECK_LIST.md to repository
        if: ${{ success() }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Backup certificates to Dropbox
        run: |
          set -eo pipefail
          rclone sync ./ssl dropbox:$DROPBOX_PATH $RCLONE_PARAMS --log-file=rclone_backup.log
          echo "Backup completed."

      - name: Cleanup
        run: |
          rm -rf ./ssl cloudflare_domains_list.txt
          echo "Cleaned up local files."
