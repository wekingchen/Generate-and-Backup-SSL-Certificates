name: Check SSL Certificate Expiry
on:
  schedule:
    - cron: "0 1 * * *"
  workflow_dispatch:

env:
  EMAIL: ${{ secrets.EMAIL }}
  RCLONE_PARAMS: "--transfers=10 --checkers=10 --stats=1s"
  DROPBOX_PATH: "SSL"
  DAYS_BEFORE_EXPIRY: 30

jobs:
  check-certificates:
    runs-on: ubuntu-latest
    name: Check SSL Certificate Expiry and Update Check List
    steps:
      - name: Checkout master
        uses: actions/checkout@v4

      - name: Install rclone
        run: curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONFIG" > ~/.config/rclone/rclone.conf

      - name: Sync certificates from Dropbox
        run: |
          rclone sync dropbox:$DROPBOX_PATH ./ssl $RCLONE_PARAMS --log-file=rclone_sync.log || exit 1
          echo "SSL Certificates synced from Dropbox."

      - name: Check certificate expiry and update CHECK_LIST.md
        run: |
          git config --global user.email $EMAIL
          git config --global user.name acme

          check_certificate() {
            cert_file=$1
            if [ -f "$cert_file" ]; then
              expiry_date=$(openssl x509 -enddate -noout -in "$cert_file" | cut -d= -f2)
              expiry_timestamp=$(date -d "$expiry_date" +%s)
              current_timestamp=$(date +%s)
              days_left=$(( (expiry_timestamp - current_timestamp) / 86400 ))
              echo "$expiry_date|$days_left"
            else
              echo "Not found|0"
            fi
          }

          CURRENT_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "## Certificate Status (Checked at $CURRENT_TIME)" > CHECK_LIST.md
          echo "| Domain | Expiry Date (EC) | Days Left (EC) | Expiry Date (RSA) | Days Left (RSA) |" >> CHECK_LIST.md
          echo "|--------|-------------------|----------------|--------------------|--------------------|" >> CHECK_LIST.md

          trigger_renewal=false
          expiring_domains=""
          for domain_dir in ./ssl/*/; do
            domain=$(basename "$domain_dir")
            ec_result=$(check_certificate "$domain_dir/$domain.cer")
            rsa_result=$(check_certificate "$domain_dir/rsa/$domain.cer")
            
            IFS='|' read -r ec_expiry ec_days <<< "$ec_result"
            IFS='|' read -r rsa_expiry rsa_days <<< "$rsa_result"

            echo "| $domain | $ec_expiry | $ec_days | $rsa_expiry | $rsa_days |" >> CHECK_LIST.md

            if [ "$ec_days" -lt "$DAYS_BEFORE_EXPIRY" ] || [ "$rsa_days" -lt "$DAYS_BEFORE_EXPIRY" ]; then
              trigger_renewal=true
              expiring_domains="$expiring_domains $domain"
            fi
          done

          git add CHECK_LIST.md
          git commit -m "Update CHECK_LIST.md with certificate expiry dates and execution time at $CURRENT_TIME"

          if [ "$trigger_renewal" = true ]; then
            echo "Certificates are expiring soon, triggering renewal workflow..."
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/actions/workflows/generate_and_backup_ssl.yml/dispatches \
              -d '{"ref": "master"}' || { echo "Failed to trigger renewal workflow"; exit 1; }
            
            # Send Bark notification
            BARK_URL="${{ secrets.BARK_URL }}"
            NOTIFICATION_TITLE="SSL证书即将过期"
            NOTIFICATION_BODY="以下域名的SSL证书即将过期: $expiring_domains 更新工作流已触发。"
            curl -X POST "$BARK_URL/$NOTIFICATION_TITLE/$NOTIFICATION_BODY"
          fi

      - name: Push updated CHECK_LIST.md to repository
        uses: ad-m/github-push-action@v1  # 使用 v1 版本
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean up local certificates
        run: |
          rm -rf ./ssl
          echo "Local SSL certificates cleaned up."
